{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCvSK-IUHXso5s6qgnQXZTr17qS0NiLVHc\",\n  authDomain: \"portal-7d1e9.firebaseapp.com\",\n  projectId: \"portal-7d1e9\",\n  storageBucket: \"portal-7d1e9.firebasestorage.app\",\n  messagingSenderId: \"476178266373\",\n  appId: \"1:476178266373:web:dc6776df518b53aeea1f6c\",\n  measurementId: \"G-1ZCEL3KRK6\"\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst provider = new GoogleAuthProvider();\n\n// Request Google Calendar read-only scope\nprovider.addScope(\"https://www.googleapis.com/auth/calendar.readonly\");\nconst signInWithGoogle = async () => {\n  try {\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n\n    // Get the Firebase ID token (for your backend, if needed)\n    const idToken = await user.getIdToken();\n\n    // Get the Google OAuth access token (for calling Google Calendar API)\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const accessToken = credential.accessToken;\n\n    // Store both tokens\n    localStorage.setItem('token', idToken);\n    localStorage.setItem('googleAccessToken', accessToken);\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  } catch (error) {\n    console.error(\"Google sign-in error:\", error);\n    return null;\n  }\n};\nexport { auth, signInWithGoogle, provider };","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","provider","addScope","signInWithGoogle","result","user","idToken","getIdToken","credential","credentialFromResult","accessToken","localStorage","setItem","JSON","stringify","error","console"],"sources":["C:/Users/Phi Nguyen/Portal/technician-portal/frontend/src/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCvSK-IUHXso5s6qgnQXZTr17qS0NiLVHc\",\r\n  authDomain: \"portal-7d1e9.firebaseapp.com\",\r\n  projectId: \"portal-7d1e9\",\r\n  storageBucket: \"portal-7d1e9.firebasestorage.app\",\r\n  messagingSenderId: \"476178266373\",\r\n  appId: \"1:476178266373:web:dc6776df518b53aeea1f6c\",\r\n  measurementId: \"G-1ZCEL3KRK6\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst provider = new GoogleAuthProvider();\r\n\r\n// Request Google Calendar read-only scope\r\nprovider.addScope(\"https://www.googleapis.com/auth/calendar.readonly\");\r\n\r\nconst signInWithGoogle = async () => {\r\n  try {\r\n    const result = await signInWithPopup(auth, provider);\r\n    const user = result.user;\r\n\r\n    // Get the Firebase ID token (for your backend, if needed)\r\n    const idToken = await user.getIdToken();\r\n\r\n    // Get the Google OAuth access token (for calling Google Calendar API)\r\n    const credential = GoogleAuthProvider.credentialFromResult(result);\r\n    const accessToken = credential.accessToken;\r\n\r\n    // Store both tokens\r\n    localStorage.setItem('token', idToken);\r\n    localStorage.setItem('googleAccessToken', accessToken);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\"Google sign-in error:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport { auth, signInWithGoogle, provider };\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,QAAQ,eAAe;AAE5E,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,8BAA8B;EAC1CC,SAAS,EAAE,cAAc;EACzBC,aAAa,EAAE,kCAAkC;EACjDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,GAAG,GAAGZ,aAAa,CAACI,cAAc,CAAC;AACzC,MAAMS,IAAI,GAAGZ,OAAO,CAACW,GAAG,CAAC;AACzB,MAAME,QAAQ,GAAG,IAAIZ,kBAAkB,CAAC,CAAC;;AAEzC;AACAY,QAAQ,CAACC,QAAQ,CAAC,mDAAmD,CAAC;AAEtE,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMd,eAAe,CAACU,IAAI,EAAEC,QAAQ,CAAC;IACpD,MAAMI,IAAI,GAAGD,MAAM,CAACC,IAAI;;IAExB;IACA,MAAMC,OAAO,GAAG,MAAMD,IAAI,CAACE,UAAU,CAAC,CAAC;;IAEvC;IACA,MAAMC,UAAU,GAAGnB,kBAAkB,CAACoB,oBAAoB,CAACL,MAAM,CAAC;IAClE,MAAMM,WAAW,GAAGF,UAAU,CAACE,WAAW;;IAE1C;IACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEN,OAAO,CAAC;IACtCK,YAAY,CAACC,OAAO,CAAC,mBAAmB,EAAEF,WAAW,CAAC;IACtDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC,CAAC;IAElD,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,IAAI;EACb;AACF,CAAC;AAED,SAASf,IAAI,EAAEG,gBAAgB,EAAEF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}